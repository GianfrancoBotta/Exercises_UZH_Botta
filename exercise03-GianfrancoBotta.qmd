---
title: "Exercise 03"
author: "Gianfranco Botta (GianfrancoBotta)"
date: "02 10 2023"
format: 
    html:
      toc: true
      self-contained: true
      highlight-style: github
      code-line-numbers: true
editor_options: 
    chunk_output_type: console
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```

## Load packages

```{r, warning=FALSE, message=FALSE}
library(tidyverse)
library(dplyr)
library(ggplot2)
library(ggcorrplot)
library(pheatmap)
library(corrplot)
library(vioplot)
library(dendextend)
```

## Set seed and import data

```{r }
# Set the seed allowing for reproducibility
set.seed(123)

# Import data
x = readRDS("counts.RDS")
anno = readRDS("phenodata.RDS")
x_len = length(x)
```

## Question 1

First of all, since we are asked to color all the results by experimental conditions, we divide the dataframe by experimental conditions.

```{r}
# Merge the two dataframes

anno$Experiment <- paste(anno$Treatment, "-", anno$Technology)
exp <- as.data.frame(anno$Experiment)
rownames(exp) <- rownames(anno)
colnames(exp) <- "Experiment"
anno_x <- data.frame(merge(t(x), exp, by = 'row.names', all = TRUE))
anno_x <- anno_x %>% select(Experiment, everything())
```

*How many replicates are there for each combination of factor levels?*

Since the replicates depends on the factors that have been used during the experiment, we have six total combinations. In fact there are two factors: "Treatment", consisting of DMSO and TSA, and "Technology", which measures samples using: bulk, IFC96, and IFC800. 

```{r }
n_replicates <- table(anno$Treatment, anno$Technology)

n_replicates
```

We notice that we have much less samples where bulk has been used.

*How many genes have an expression above 0 in each sample?*

It is useful to check which genes are expressed in each sample, because they could be the genes usually active in the conditions in which the samples are taken.                                 

```{r }
n_genes <- ncol(anno_x)-2
n_expressed_genes <- sum((apply(anno_x[3:ncol(anno_x)], 2, prod) != 0), na.rm=TRUE)

n_genes
n_expressed_genes
```

We can see from the results that out of 21074 genes, only 21 are expressed in each sample.

*Visualize the following statistics per sample and color the samples by the experimental condition:*

*Number of detected genes*

```{r}
n_detected_genes <- rowSums(anno_x[3:ncol(anno_x)] > 0)
genes_det <- data.frame(anno_x[1], as.factor(n_detected_genes), Indices = 1:86)
colors <- c("red", "black", "green", "blue", "yellow", "violet")

p <- ggplot(genes_det, aes(x = Indices, y = n_detected_genes)) +
  theme_bw() +
  theme(
    panel.border = element_blank(),
    axis.line = element_line(color = "black", linewidth = 0.5, lineend = "square")
  ) +
  labs(x = "Samples indices", y = "N of detected genes") +
  ggtitle("Number of detected genes for each sample")
p + geom_point(aes(color = Experiment)) +
scale_color_manual(values = colors)
```

We immediately notice that the number of detected genes using bulk is considerably greater than the samples where other methods were exploited.

*Total sum of counts per sample (serves as a proxy for the number of sequenced reads per sample)*

```{r, warning=FALSE, message=FALSE}
counts_sum <- colSums(x)
counts_df <- data.frame(anno_x[1], Counts = counts_sum, Indices = 1:86)

ggplot(counts_df, aes(x = Indices, y = Counts, fill = Experiment)) +
  geom_histogram(stat = "identity") +
  scale_y_log10() +
  theme_bw() +
  theme(
    panel.border = element_blank(),
    axis.line = element_line(color = "black", linewidth = 0.5, lineend = "square")
  ) +
  labs(x = "Samples indices") +
  ggtitle("Counts per sample")

```

As we see, it is always better to show the level of expression using a log-scale due to the large range of expression levels among the samples.

*Normalize the data*

Scale the columns so that the total sum of all columns are identical.

```{r}
scaled_x = sweep(t(anno_x[,3:ncol(anno_x)]), 2, counts_sum, `/`)
scaled_x = scaled_x*10^8

# We can verify that our operation is correct with the command:
# colSums(scaled_x)
```

Since all the values in the dataframe are very low (close to zero), before performing the logarithm, it is better to multiply them for a constant, hence the violin plots and the boxplots are readable.

*Transform the data to log-scale*

Use the function `log1p` to transform the data to log-scale

```{r}
log_scaled_x <- log1p(scaled_x)
```

*Visualize the distribution of the expression values*

Use violin plots and boxplots to visualize the distribution of the expression values. 
Aggregate the replicates in the same experimental group into one average sample, and plot the averaged sample.

```{r}
log_scaled_anno_x = data.frame(anno_x[1:2], t(log_scaled_x))

# Aggregate the replicates in an average sample by mean
mean_df <- aggregate(log_scaled_anno_x[3:ncol(log_scaled_anno_x)], list(log_scaled_anno_x$Experiment), FUN=mean)

mean_df <- pivot_longer(mean_df, col = colnames(mean_df)[2:ncol(mean_df)], names_to = "Genes", values_to = "Values")

ggplot(mean_df, aes(x = Group.1, y = Values, fill = Group.1)) +
  geom_violin(width=0.8) +
  labs(title="Log-normalized expression values for all genes combined", x="Samples", y="Log-normalized expression values") +
  theme_minimal()

ggplot(mean_df, aes(x = Group.1, y = Values, fill = Group.1)) +
  geom_boxplot(width=0.8) + 
  labs(title="Log-normalized expression values for all genes combined", x="Samples", y="Log-normalized expression values") +
  theme_minimal()
```

*Are there systematic differences between the samples in the different conditions (treatment & technology)?*

First of all, the samples acquired using bulk technology show a higher average expression, but we have to pay attention that we have only 6 samples in this group.
Second, we can notice from the boxplots we deal with lots of outliers in the samples acquired with IFC800 technology. This could suggest us of a high heteogeneity among the expression values in these two categories. In fact, we see from the violin plots that the distribution of these two categories is strongly concentrated around the value 0.
Third, we can see also that the samples acquired using IFC96 technology show an average expression a little higher than the ones acquired using IFC800.

*Most variable genes*

Identify the 500 most variable genes (with largest variance across samples) and continue working with those.

```{r}
# Find the variance of each gene
genes_vars <- apply(log_scaled_x, 1, var)

sorted_idx <- order(genes_vars, decreasing = TRUE)
best_500_genes <- log_scaled_x[sorted_idx[1:500], ]
```

*Sample correlations*

Compute and visualize the sample-to-sample correlations.

```{r}
# Compute the correlation (using Euclidean distance)
cor <- cor(best_500_genes)
rownames(cor) <- NULL
colnames(cor) <- NULL

# Visualize it
ggcorrplot(cor, hc.order = TRUE, type = "lower")
```

*Clustering*

Compute and visualize a hierarchical clustering of the samples, use the method `hclust`.

```{r}
best_500_genes_copy = best_500_genes
rownames(best_500_genes_copy) <- NULL
dist_matrix <- dist(best_500_genes_copy, method = "euclidean")
# Perform hierarchical clustering
hclust_result <- hclust(dist_matrix, method = "complete") 

# Visualize the dendogram
plot(hclust_result, hang = -1, cex = 0.01,  main = "Hierarchical Clustering Dendrogram of best 500 genes", xlab = "Genes", labels = NULL, col = "black")
```

Run the code to visualize a better version of the dendogram.

*Heatmap*

Use the package `pheatmap` to generate a heatmap of the expression data.

```{r}
pheatmap(
  best_500_genes,
  scale = "row",
  cluster_rows = FALSE,
  cluster_cols = TRUE,
  main = "Heatmap of Expression Data",
  fontsize_row = 8,
  fontsize_col = 8,
  color = colorRampPalette(c("blue", "white", "red"))(100),
  show_rownames = FALSE,
  show_colnames = FALSE   
)
```

We can notice that there is a region in the middle in which genes are highly expressed. Moreover, the two regions split by this very active one are totally different. On the left side, the heatmap shows very low values of expression, while on the right side, it shows medium-high values. 